'\" t
.TH "SYSTEMD\-RUN" "1" "" "systemd 233" "systemd-run"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-run \- Run programs in transient scope units, service units, or timer\-scheduled service units
.SH "SYNOPSIS"
.HP \w'\fBsystemd\-run\fR\ 'u
\fBsystemd\-run\fR [OPTIONS...] \fICOMMAND\fR\ [ARGS...] 
.HP \w'\fBsystemd\-run\fR\ 'u
\fBsystemd\-run\fR [OPTIONS...] [TIMER\ OPTIONS...] {\fICOMMAND\fR} [ARGS...]
.SH "DESCRIPTION"
.PP
\fBsystemd\-run\fR
may be used to create and start a transient
\&.service
or
\&.scope
unit and run the specified
\fICOMMAND\fR
in it\&. It may also be used to create and start a transient
\&.timer
unit, that activates a
\&.service
unit when elapsing\&.
.PP
If a command is run as transient service unit, it will be started and managed by the service manager like any other service, and thus shows up in the output of
\fBsystemctl list\-units\fR
like any other unit\&. It will run in a clean and detached execution environment, with the service manager as its parent process\&. In this mode,
\fBsystemd\-run\fR
will start the service asynchronously in the background and return after the command has begun execution (unless
\fB\-\-no\-block\fR
or
\fB\-\-wait\fR
are specified, see below)\&.
.PP
If a command is run as transient scope unit, it will be executed by
\fBsystemd\-run\fR
itself as parent process and will thus inherit the execution environment of the caller\&. However, the processes of the command are managed by the service manager similar to normal services, and will show up in the output of
\fBsystemctl list\-units\fR\&. Execution in this case is synchronous, and will return only when the command finishes\&. This mode is enabled via the
\fB\-\-scope\fR
switch (see below)\&.
.PP
If a command is run with timer options such as
\fB\-\-on\-calendar=\fR
(see below), a transient timer unit is created alongside the service unit for the specified command\&. Only the transient timer unit is started immediately, the transient service unit will be started when the timer elapses\&. If the
\fB\-\-unit=\fR
option is specified, the
\fICOMMAND\fR
may be omitted\&. In this case,
\fBsystemd\-run\fR
creates only a
\&.timer
unit that invokes the specified unit when elapsing\&.
.SH "OPTIONS"
.PP
The following options are understood:
.PP
\fB\-\-no\-ask\-password\fR
.RS 4
Do not query the user for authentication for privileged operations\&.
.RE
.PP
\fB\-\-scope\fR
.RS 4
Create a transient
\&.scope
unit instead of the default transient
\&.service
unit (see above)\&.
.RE
.PP
\fB\-\-unit=\fR
.RS 4
Use this unit name instead of an automatically generated one\&.
.RE
.PP
\fB\-\-property=\fR, \fB\-p\fR
.RS 4
Sets a property on the scope or service unit that is created\&. This option takes an assignment in the same format as
\fBsystemctl\fR(1)\*(Aqs
\fBset\-property\fR
command\&.
.RE
.PP
\fB\-\-description=\fR
.RS 4
Provide a description for the service, scope or timer unit\&. If not specified, the command itself will be used as a description\&. See
\fIDescription=\fR
in
\fBsystemd.unit\fR(5)\&.
.RE
.PP
\fB\-\-slice=\fR
.RS 4
Make the new
\&.service
or
\&.scope
unit part of the specified slice, instead of
system\&.slice\&.
.RE
.PP
\fB\-\-remain\-after\-exit\fR
.RS 4
After the service process has terminated, keep the service around until it is explicitly stopped\&. This is useful to collect runtime information about the service after it finished running\&. Also see
\fIRemainAfterExit=\fR
in
\fBsystemd.service\fR(5)\&.
.RE
.PP
\fB\-\-send\-sighup\fR
.RS 4
When terminating the scope or service unit, send a SIGHUP immediately after SIGTERM\&. This is useful to indicate to shells and shell\-like processes that the connection has been severed\&. Also see
\fISendSIGHUP=\fR
in
\fBsystemd.kill\fR(5)\&.
.RE
.PP
\fB\-\-service\-type=\fR
.RS 4
Sets the service type\&. Also see
\fIType=\fR
in
\fBsystemd.service\fR(5)\&. This option has no effect in conjunction with
\fB\-\-scope\fR\&. Defaults to
\fBsimple\fR\&.
.RE
.PP
\fB\-\-uid=\fR, \fB\-\-gid=\fR
.RS 4
Runs the service process under the specified UNIX user and group\&. Also see
\fIUser=\fR
and
\fIGroup=\fR
in
\fBsystemd.exec\fR(5)\&.
.RE
.PP
\fB\-\-nice=\fR
.RS 4
Runs the service process with the specified nice level\&. Also see
\fINice=\fR
in
\fBsystemd.exec\fR(5)\&.
.RE
.PP
\fB\-E \fR\fB\fINAME\fR\fR\fB=\fR\fB\fIVALUE\fR\fR, \fB\-\-setenv=\fR\fB\fINAME\fR\fR\fB=\fR\fB\fIVALUE\fR\fR
.RS 4
Runs the service process with the specified environment variable set\&. Also see
\fIEnvironment=\fR
in
\fBsystemd.exec\fR(5)\&.
.RE
.PP
\fB\-\-pty\fR, \fB\-t\fR
.RS 4
When invoking the command, the transient service connects its standard input and output to the terminal
\fBsystemd\-run\fR
is invoked on, via a pseudo TTY device\&. This allows running binaries that expect interactive user input as services, such as interactive command shells\&.
.sp
Note that
\fBmachinectl\fR(1)\*(Aqs
\fBshell\fR
command is usually a better alternative for requesting a new, interactive login session on the local host or a local container\&.
.RE
.PP
\fB\-\-quiet\fR, \fB\-q\fR
.RS 4
Suppresses additional informational output while running\&. This is particularly useful in combination with
\fB\-\-pty\fR
when it will suppress the initial message explaining how to terminate the TTY connection\&.
.RE
.PP
\fB\-\-on\-active=\fR, \fB\-\-on\-boot=\fR, \fB\-\-on\-startup=\fR, \fB\-\-on\-unit\-active=\fR, \fB\-\-on\-unit\-inactive=\fR
.RS 4
Defines a monotonic timer relative to different starting points for starting the specified command\&. See
\fIOnActiveSec=\fR,
\fIOnBootSec=\fR,
\fIOnStartupSec=\fR,
\fIOnUnitActiveSec=\fR
and
\fIOnUnitInactiveSec=\fR
in
\fBsystemd.timer\fR(5)
for details\&. These options may not be combined with
\fB\-\-scope\fR
or
\fB\-\-pty\fR\&.
.RE
.PP
\fB\-\-on\-calendar=\fR
.RS 4
Defines a calendar timer for starting the specified command\&. See
\fIOnCalendar=\fR
in
\fBsystemd.timer\fR(5)\&. This option may not be combined with
\fB\-\-scope\fR
or
\fB\-\-pty\fR\&.
.RE
.PP
\fB\-\-timer\-property=\fR
.RS 4
Sets a property on the timer unit that is created\&. This option is similar to
\fB\-\-property=\fR
but applies to the transient timer unit rather than the transient service unit created\&. This option only has an effect in conjunction with
\fB\-\-on\-active=\fR,
\fB\-\-on\-boot=\fR,
\fB\-\-on\-startup=\fR,
\fB\-\-on\-unit\-active=\fR,
\fB\-\-on\-unit\-inactive=\fR
or
\fB\-\-on\-calendar=\fR\&. This option takes an assignment in the same format as
\fBsystemctl\fR(1)\*(Aqs
\fBset\-property\fR
command\&.
.RE
.PP
\fB\-\-no\-block\fR
.RS 4
Do not synchronously wait for the unit start operation to finish\&. If this option is not specified, the start request for the transient unit will be verified, enqueued and
\fBsystemd\-run\fR
will wait until the unit\*(Aqs start\-up is completed\&. By passing this argument, it is only verified and enqueued\&. This option may not be combined with
\fB\-\-wait\fR\&.
.RE
.PP
\fB\-\-wait\fR
.RS 4
Synchronously wait for the transient service to terminate\&. If this option is specified, the start request for the transient unit is verified, enqueued, and waited for\&. Subsequently the invoked unit is monitored, and it is waited until it is deactivated again (most likely because the specified command completed)\&. On exit, terse information about the unit\*(Aqs runtime is shown, including total runtime (as well as CPU usage, if
\fB\-\-property=CPUAccounting=1\fR
was set) and the exit code and status of the main process\&. This output may be suppressed with
\fB\-\-quiet\fR\&. This option may not be combined with
\fB\-\-no\-block\fR,
\fB\-\-scope\fR
or the various timer options\&.
.RE
.PP
\fB\-\-user\fR
.RS 4
Talk to the service manager of the calling user, rather than the service manager of the system\&.
.RE
.PP
\fB\-\-system\fR
.RS 4
Talk to the service manager of the system\&. This is the implied default\&.
.RE
.PP
\fB\-H\fR, \fB\-\-host=\fR
.RS 4
Execute the operation remotely\&. Specify a hostname, or a username and hostname separated by
"@", to connect to\&. The hostname may optionally be suffixed by a container name, separated by
":", which connects directly to a specific container on the specified host\&. This will use SSH to talk to the remote machine manager instance\&. Container names may be enumerated with
\fBmachinectl \-H \fR\fB\fIHOST\fR\fR\&.
.RE
.PP
\fB\-M\fR, \fB\-\-machine=\fR
.RS 4
Execute operation on a local container\&. Specify a container name to connect to\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Print a short help text and exit\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Print a short version string and exit\&.
.RE
.PP
All command line arguments after the first non\-option argument become part of the command line of the launched process\&. If a command is run as service unit, its first argument needs to be an absolute binary path\&.
.SH "EXIT STATUS"
.PP
On success, 0 is returned, a non\-zero failure code otherwise\&.
.SH "EXAMPLES"
.PP
\fBExample\ \&1.\ \&Logging environment variables provided by systemd to services\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# systemd\-run env
Running as unit: run\-19945\&.service
# journalctl \-u run\-19945\&.service
Sep 08 07:37:21 bupkis systemd[1]: Starting /usr/bin/env\&.\&.\&.
Sep 08 07:37:21 bupkis systemd[1]: Started /usr/bin/env\&.
Sep 08 07:37:21 bupkis env[19948]: PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
Sep 08 07:37:21 bupkis env[19948]: LANG=en_US\&.UTF\-8
Sep 08 07:37:21 bupkis env[19948]: BOOT_IMAGE=/vmlinuz\-3\&.11\&.0\-0\&.rc5\&.git6\&.2\&.fc20\&.x86_64
.fi
.if n \{\
.RE
.\}
.PP
\fBExample\ \&2.\ \&Limiting resources available to a command\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# systemd\-run \-p BlockIOWeight=10 updatedb
.fi
.if n \{\
.RE
.\}
.PP
This command invokes the
\fBupdatedb\fR(8)
tool, but lowers the block I/O weight for it to 10\&. See
\fBsystemd.resource-control\fR(5)
for more information on the
\fIBlockIOWeight=\fR
property\&.
.PP
\fBExample\ \&3.\ \&Running commands at a specified time\fR
.PP
The following command will touch a file after 30 seconds\&.
.sp
.if n \{\
.RS 4
.\}
.nf
# date; systemd\-run \-\-on\-active=30 \-\-timer\-property=AccuracySec=100ms /bin/touch /tmp/foo
Mon Dec  8 20:44:24 KST 2014
Running as unit: run\-71\&.timer
Will run service as unit: run\-71\&.service
# journalctl \-b \-u run\-71\&.timer
\-\- Logs begin at Fri 2014\-12\-05 19:09:21 KST, end at Mon 2014\-12\-08 20:44:54 KST\&. \-\-
Dec 08 20:44:38 container systemd[1]: Starting /bin/touch /tmp/foo\&.
Dec 08 20:44:38 container systemd[1]: Started /bin/touch /tmp/foo\&.
# journalctl \-b \-u run\-71\&.service
\-\- Logs begin at Fri 2014\-12\-05 19:09:21 KST, end at Mon 2014\-12\-08 20:44:54 KST\&. \-\-
Dec 08 20:44:48 container systemd[1]: Starting /bin/touch /tmp/foo\&.\&.\&.
Dec 08 20:44:48 container systemd[1]: Started /bin/touch /tmp/foo\&.
.fi
.if n \{\
.RE
.\}
.PP
\fBExample\ \&4.\ \&Allowing access to the tty\fR
.PP
The following command invokes
/bin/bash
as a service passing its standard input, output and error to the calling TTY\&.
.sp
.if n \{\
.RS 4
.\}
.nf
# systemd\-run \-t \-\-send\-sighup /bin/bash
.fi
.if n \{\
.RE
.\}
.PP
\fBExample\ \&5.\ \&Start screen as a user service\fR
.sp
.if n \{\
.RS 4
.\}
.nf
$ systemd\-run \-\-scope \-\-user screen
Running scope as unit run\-r14b0047ab6df45bfb45e7786cc839e76\&.scope\&.

$ screen \-ls
There is a screen on:
        492\&.\&.laptop     (Detached)
1 Socket in /var/run/screen/S\-fatima\&.
.fi
.if n \{\
.RE
.\}
.PP
This starts the
\fBscreen\fR
process as a child of the
\fBsystemd \-\-user\fR
process that was started by
user@\&.service, in a scope unit\&. A
\fBsystemd.scope\fR(5)
unit is used instead of a
\fBsystemd.service\fR(5)
unit, because
\fBscreen\fR
will exit when detaching from the terminal, and a service unit would be terminated\&. Running
\fBscreen\fR
as a user unit has the advantage that it is not part of the session scope\&. If
\fIKillUserProcesses=yes\fR
is configured in
\fBlogind.conf\fR(5), the default, the session scope will be terminated when the user logs out of that session\&.
.PP
The
user@\&.service
is started automatically when the user first logs in, and stays around as long as at least one login session is open\&. After the user logs out of the last session,
user@\&.service
and all services underneath it are terminated\&. This behavior is the default, when "lingering" is not enabled for that user\&. Enabling lingering means that
user@\&.service
is started automatically during boot, even if the user is not logged in, and that the service is not terminated when the user logs out\&.
.PP
Enabling lingering allows the user to run processes without being logged in, for example to allow
\fBscreen\fR
to persist after the user logs out, even if the session scope is terminated\&. In the default configuration, users can enable lingering for themselves:
.sp
.if n \{\
.RS 4
.\}
.nf
$ loginctl enable\-linger
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemctl\fR(1),
\fBsystemd.unit\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.scope\fR(5),
\fBsystemd.slice\fR(5),
\fBsystemd.exec\fR(5),
\fBsystemd.resource-control\fR(5),
\fBsystemd.timer\fR(5),
\fBsystemd-mount\fR(1),
\fBmachinectl\fR(1)
