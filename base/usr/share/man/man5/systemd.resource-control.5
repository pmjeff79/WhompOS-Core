'\" t
.TH "SYSTEMD\&.RESOURCE\-CONTROL" "5" "" "systemd 233" "systemd.resource-control"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.resource-control \- Resource control unit settings
.SH "SYNOPSIS"
.PP
\fIslice\fR\&.slice,
\fIscope\fR\&.scope,
\fIservice\fR\&.service,
\fIsocket\fR\&.socket,
\fImount\fR\&.mount,
\fIswap\fR\&.swap
.SH "DESCRIPTION"
.PP
Unit configuration files for services, slices, scopes, sockets, mount points, and swap devices share a subset of configuration options for resource control of spawned processes\&. Internally, this relies on the Linux Control Groups (cgroups) kernel concept for organizing processes in a hierarchical tree of named groups for the purpose of resource management\&.
.PP
This man page lists the configuration options shared by those six unit types\&. See
\fBsystemd.unit\fR(5)
for the common options of all unit configuration files, and
\fBsystemd.slice\fR(5),
\fBsystemd.scope\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.mount\fR(5), and
\fBsystemd.swap\fR(5)
for more information on the specific unit configuration files\&. The resource control configuration options are configured in the [Slice], [Scope], [Service], [Socket], [Mount], or [Swap] sections, depending on the unit type\&.
.PP
In addition, options which control resources available to programs
\fIexecuted\fR
by systemd are listed in
\fBsystemd.exec\fR(5)\&. Those options complement options listed here\&.
.PP
See the
\m[blue]\fBNew Control Group Interfaces\fR\m[]\&\s-2\u[1]\d\s+2
for an introduction on how to make use of resource control APIs from programs\&.
.SH "AUTOMATIC DEPENDENCIES"
.PP
Units with the
\fISlice=\fR
setting set automatically acquire
\fIRequires=\fR
and
\fIAfter=\fR
dependencies on the specified slice unit\&.
.SH "UNIFIED AND LEGACY CONTROL GROUP HIERARCHIES"
.PP
The unified control group hierarchy is the new version of kernel control group interface, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&. Depending on the resource type, there are differences in resource control capabilities\&. Also, because of interface changes, some resource types have separate set of options on the unified hierarchy\&.
.PP
.PP
\fBCPU\fR
.RS 4
Due to the lack of consensus in the kernel community, the CPU controller support on the unified control group hierarchy requires out\-of\-tree kernel patches\&. See
\m[blue]\fBcgroup\-v2\-cpu\&.txt\fR\m[]\&\s-2\u[3]\d\s+2\&.
.sp
\fICPUWeight=\fR
and
\fIStartupCPUWeight=\fR
replace
\fICPUShares=\fR
and
\fIStartupCPUShares=\fR, respectively\&.
.sp
The
"cpuacct"
controller does not exist separately on the unified hierarchy\&.
.RE
.PP
\fBMemory\fR
.RS 4
\fIMemoryMax=\fR
replaces
\fIMemoryLimit=\fR\&.
\fIMemoryLow=\fR
and
\fIMemoryHigh=\fR
are effective only on unified hierarchy\&.
.RE
.PP
\fBIO\fR
.RS 4
\fIIO\fR
prefixed settings are superset of and replace
\fIBlockIO\fR
prefixed ones\&. On unified hierarchy, IO resource control also applies to buffered writes\&.
.RE
.PP
To ease the transition, there is best\-effort translation between the two versions of settings\&. For each controller, if any of the settings for the unified hierarchy are present, all settings for the legacy hierarchy are ignored\&. If the resulting settings are for the other type of hierarchy, the configurations are translated before application\&.
.PP
Legacy control group hierarchy (see
\m[blue]\fBcgroups\&.txt\fR\m[]\&\s-2\u[4]\d\s+2), also called cgroup\-v1, doesn\*(Aqt allow safe delegation of controllers to unprivileged processes\&. If the system uses the legacy control group hierarchy, resource control is disabled for systemd user instance, see
\fBsystemd\fR(1)\&.
.SH "OPTIONS"
.PP
Units of the types listed above can have settings for resource control configuration:
.PP
\fICPUAccounting=\fR
.RS 4
Turn on CPU usage accounting for this unit\&. Takes a boolean argument\&. Note that turning on CPU accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein\&. The system default for this setting may be controlled with
\fIDefaultCPUAccounting=\fR
in
\fBsystemd-system.conf\fR(5)\&.
.RE
.PP
\fICPUWeight=\fR\fI\fIweight\fR\fR, \fIStartupCPUWeight=\fR\fI\fIweight\fR\fR
.RS 4
Assign the specified CPU time weight to the processes executed, if the unified control group hierarchy is used on the system\&. These options take an integer value and control the
"cpu\&.weight"
control group attribute\&. The allowed range is 1 to 10000\&. Defaults to 100\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2
and
\m[blue]\fBsched\-design\-CFS\&.txt\fR\m[]\&\s-2\u[5]\d\s+2\&. The available CPU time is split up among all units within one slice relative to their CPU time weight\&.
.sp
While
\fIStartupCPUWeight=\fR
only applies to the startup phase of the system,
\fICPUWeight=\fR
applies to normal runtime of the system, and if the former is not set also to the startup phase\&. Using
\fIStartupCPUWeight=\fR
allows prioritizing specific services at boot\-up differently than during normal runtime\&.
.sp
Implies
"CPUAccounting=true"\&.
.sp
These settings replace
\fICPUShares=\fR
and
\fIStartupCPUShares=\fR\&.
.RE
.PP
\fICPUQuota=\fR
.RS 4
Assign the specified CPU time quota to the processes executed\&. Takes a percentage value, suffixed with "%"\&. The percentage specifies how much CPU time the unit shall get at maximum, relative to the total CPU time available on one CPU\&. Use values > 100% for allotting CPU time on more than one CPU\&. This controls the
"cpu\&.max"
attribute on the unified control group hierarchy and
"cpu\&.cfs_quota_us"
on legacy\&. For details about these control group attributes, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2
and
\m[blue]\fBsched\-design\-CFS\&.txt\fR\m[]\&\s-2\u[5]\d\s+2\&.
.sp
Example:
\fICPUQuota=20%\fR
ensures that the executed processes will never get more than 20% CPU time on one CPU\&.
.sp
Implies
"CPUAccounting=true"\&.
.RE
.PP
\fIMemoryAccounting=\fR
.RS 4
Turn on process and kernel memory accounting for this unit\&. Takes a boolean argument\&. Note that turning on memory accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein\&. The system default for this setting may be controlled with
\fIDefaultMemoryAccounting=\fR
in
\fBsystemd-system.conf\fR(5)\&.
.RE
.PP
\fIMemoryLow=\fR\fI\fIbytes\fR\fR
.RS 4
Specify the best\-effort memory usage protection of the executed processes in this unit\&. If the memory usages of this unit and all its ancestors are below their low boundaries, this unit\*(Aqs memory won\*(Aqt be reclaimed as long as memory can be reclaimed from unprotected units\&.
.sp
Takes a memory size in bytes\&. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively\&. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system\&. This controls the
"memory\&.low"
control group attribute\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"MemoryAccounting=true"\&.
.sp
This setting is supported only if the unified control group hierarchy is used and disables
\fIMemoryLimit=\fR\&.
.RE
.PP
\fIMemoryHigh=\fR\fI\fIbytes\fR\fR
.RS 4
Specify the high limit on memory usage of the executed processes in this unit\&. Memory usage may go above the limit if unavoidable, but the processes are heavily slowed down and memory is taken away aggressively in such cases\&. This is the main mechanism to control memory usage of a unit\&.
.sp
Takes a memory size in bytes\&. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively\&. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system\&. If assigned the special value
"infinity", no memory limit is applied\&. This controls the
"memory\&.high"
control group attribute\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"MemoryAccounting=true"\&.
.sp
This setting is supported only if the unified control group hierarchy is used and disables
\fIMemoryLimit=\fR\&.
.RE
.PP
\fIMemoryMax=\fR\fI\fIbytes\fR\fR
.RS 4
Specify the absolute limit on memory usage of the executed processes in this unit\&. If memory usage cannot be contained under the limit, out\-of\-memory killer is invoked inside the unit\&. It is recommended to use
\fIMemoryHigh=\fR
as the main control mechanism and use
\fIMemoryMax=\fR
as the last line of defense\&.
.sp
Takes a memory size in bytes\&. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively\&. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system\&. If assigned the special value
"infinity", no memory limit is applied\&. This controls the
"memory\&.max"
control group attribute\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"MemoryAccounting=true"\&.
.sp
This setting replaces
\fIMemoryLimit=\fR\&.
.RE
.PP
\fIMemorySwapMax=\fR\fI\fIbytes\fR\fR
.RS 4
Specify the absolute limit on swap usage of the executed processes in this unit\&.
.sp
Takes a swap size in bytes\&. If the value is suffixed with K, M, G or T, the specified swap size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively\&. If assigned the special value
"infinity", no swap limit is applied\&. This controls the
"memory\&.swap\&.max"
control group attribute\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"MemoryAccounting=true"\&.
.sp
This setting is supported only if the unified control group hierarchy is used and disables
\fIMemoryLimit=\fR\&.
.RE
.PP
\fITasksAccounting=\fR
.RS 4
Turn on task accounting for this unit\&. Takes a boolean argument\&. If enabled, the system manager will keep track of the number of tasks in the unit\&. The number of tasks accounted this way includes both kernel threads and userspace processes, with each thread counting individually\&. Note that turning on tasks accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein\&. The system default for this setting may be controlled with
\fIDefaultTasksAccounting=\fR
in
\fBsystemd-system.conf\fR(5)\&.
.RE
.PP
\fITasksMax=\fR\fI\fIN\fR\fR
.RS 4
Specify the maximum number of tasks that may be created in the unit\&. This ensures that the number of tasks accounted for the unit (see above) stays below a specific limit\&. This either takes an absolute number of tasks or a percentage value that is taken relative to the configured maximum number of tasks on the system\&. If assigned the special value
"infinity", no tasks limit is applied\&. This controls the
"pids\&.max"
control group attribute\&. For details about this control group attribute, see
\m[blue]\fBpids\&.txt\fR\m[]\&\s-2\u[6]\d\s+2\&.
.sp
Implies
"TasksAccounting=true"\&. The system default for this setting may be controlled with
\fIDefaultTasksMax=\fR
in
\fBsystemd-system.conf\fR(5)\&.
.RE
.PP
\fIIOAccounting=\fR
.RS 4
Turn on Block I/O accounting for this unit, if the unified control group hierarchy is used on the system\&. Takes a boolean argument\&. Note that turning on block I/O accounting for one unit will also implicitly turn it on for all units contained in the same slice and all for its parent slices and the units contained therein\&. The system default for this setting may be controlled with
\fIDefaultIOAccounting=\fR
in
\fBsystemd-system.conf\fR(5)\&.
.sp
This setting replaces
\fIBlockIOAccounting=\fR
and disables settings prefixed with
\fIBlockIO\fR
or
\fIStartupBlockIO\fR\&.
.RE
.PP
\fIIOWeight=\fR\fI\fIweight\fR\fR, \fIStartupIOWeight=\fR\fI\fIweight\fR\fR
.RS 4
Set the default overall block I/O weight for the executed processes, if the unified control group hierarchy is used on the system\&. Takes a single weight value (between 1 and 10000) to set the default block I/O weight\&. This controls the
"io\&.weight"
control group attribute, which defaults to 100\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&. The available I/O bandwidth is split up among all units within one slice relative to their block I/O weight\&.
.sp
While
\fIStartupIOWeight=\fR
only applies to the startup phase of the system,
\fIIOWeight=\fR
applies to the later runtime of the system, and if the former is not set also to the startup phase\&. This allows prioritizing specific services at boot\-up differently than during runtime\&.
.sp
Implies
"IOAccounting=true"\&.
.sp
These settings replace
\fIBlockIOWeight=\fR
and
\fIStartupBlockIOWeight=\fR
and disable settings prefixed with
\fIBlockIO\fR
or
\fIStartupBlockIO\fR\&.
.RE
.PP
\fIIODeviceWeight=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIweight\fR\fR
.RS 4
Set the per\-device overall block I/O weight for the executed processes, if the unified control group hierarchy is used on the system\&. Takes a space\-separated pair of a file path and a weight value to specify the device specific weight value, between 1 and 10000\&. (Example: "/dev/sda 1000")\&. The file path may be specified as path to a block device node or as any other file, in which case the backing block device of the file system of the file is determined\&. This controls the
"io\&.weight"
control group attribute, which defaults to 100\&. Use this option multiple times to set weights for multiple devices\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"IOAccounting=true"\&.
.sp
This setting replaces
\fIBlockIODeviceWeight=\fR
and disables settings prefixed with
\fIBlockIO\fR
or
\fIStartupBlockIO\fR\&.
.RE
.PP
\fIIOReadBandwidthMax=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIbytes\fR\fR, \fIIOWriteBandwidthMax=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIbytes\fR\fR
.RS 4
Set the per\-device overall block I/O bandwidth maximum limit for the executed processes, if the unified control group hierarchy is used on the system\&. This limit is not work\-conserving and the executed processes are not allowed to use more even if the device has idle capacity\&. Takes a space\-separated pair of a file path and a bandwidth value (in bytes per second) to specify the device specific bandwidth\&. The file path may be a path to a block device node, or as any other file in which case the backing block device of the file system of the file is used\&. If the bandwidth is suffixed with K, M, G, or T, the specified bandwidth is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes, respectively, to the base of 1000\&. (Example: "/dev/disk/by\-path/pci\-0000:00:1f\&.2\-scsi\-0:0:0:0 5M")\&. This controls the
"io\&.max"
control group attributes\&. Use this option multiple times to set bandwidth limits for multiple devices\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"IOAccounting=true"\&.
.sp
These settings replace
\fIBlockIOReadBandwidth=\fR
and
\fIBlockIOWriteBandwidth=\fR
and disable settings prefixed with
\fIBlockIO\fR
or
\fIStartupBlockIO\fR\&.
.RE
.PP
\fIIOReadIOPSMax=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIIOPS\fR\fR, \fIIOWriteIOPSMax=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIIOPS\fR\fR
.RS 4
Set the per\-device overall block I/O IOs\-Per\-Second maximum limit for the executed processes, if the unified control group hierarchy is used on the system\&. This limit is not work\-conserving and the executed processes are not allowed to use more even if the device has idle capacity\&. Takes a space\-separated pair of a file path and an IOPS value to specify the device specific IOPS\&. The file path may be a path to a block device node, or as any other file in which case the backing block device of the file system of the file is used\&. If the IOPS is suffixed with K, M, G, or T, the specified IOPS is parsed as KiloIOPS, MegaIOPS, GigaIOPS, or TeraIOPS, respectively, to the base of 1000\&. (Example: "/dev/disk/by\-path/pci\-0000:00:1f\&.2\-scsi\-0:0:0:0 1K")\&. This controls the
"io\&.max"
control group attributes\&. Use this option multiple times to set IOPS limits for multiple devices\&. For details about this control group attribute, see
\m[blue]\fBcgroup\-v2\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"IOAccounting=true"\&.
.sp
These settings are supported only if the unified control group hierarchy is used and disable settings prefixed with
\fIBlockIO\fR
or
\fIStartupBlockIO\fR\&.
.RE
.PP
\fIDeviceAllow=\fR
.RS 4
Control access to specific device nodes by the executed processes\&. Takes two space\-separated strings: a device node specifier followed by a combination of
\fBr\fR,
\fBw\fR,
\fBm\fR
to control
\fIr\fReading,
\fIw\fRriting, or creation of the specific device node(s) by the unit (\fIm\fRknod), respectively\&. This controls the
"devices\&.allow"
and
"devices\&.deny"
control group attributes\&. For details about these control group attributes, see
\m[blue]\fBdevices\&.txt\fR\m[]\&\s-2\u[7]\d\s+2\&.
.sp
The device node specifier is either a path to a device node in the file system, starting with
/dev/, or a string starting with either
"char\-"
or
"block\-"
followed by a device group name, as listed in
/proc/devices\&. The latter is useful to whitelist all current and future devices belonging to a specific device group at once\&. The device group is matched according to file name globbing rules, you may hence use the
"*"
and
"?"
wildcards\&. Examples:
/dev/sda5
is a path to a device node, referring to an ATA or SCSI block device\&.
"char\-pts"
and
"char\-alsa"
are specifiers for all pseudo TTYs and all ALSA sound devices, respectively\&.
"char\-cpu/*"
is a specifier matching all CPU related device groups\&.
.RE
.PP
\fIDevicePolicy=auto|closed|strict\fR
.RS 4
Control the policy for allowing device access:
.PP
\fBstrict\fR
.RS 4
means to only allow types of access that are explicitly specified\&.
.RE
.PP
\fBclosed\fR
.RS 4
in addition, allows access to standard pseudo devices including
/dev/null,
/dev/zero,
/dev/full,
/dev/random, and
/dev/urandom\&.
.RE
.PP
\fBauto\fR
.RS 4
in addition, allows access to all devices if no explicit
\fIDeviceAllow=\fR
is present\&. This is the default\&.
.RE
.RE
.PP
\fISlice=\fR
.RS 4
The name of the slice unit to place the unit in\&. Defaults to
system\&.slice
for all non\-instantiated units of all unit types (except for slice units themselves see below)\&. Instance units are by default placed in a subslice of
system\&.slice
that is named after the template name\&.
.sp
This option may be used to arrange systemd units in a hierarchy of slices each of which might have resource settings applied\&.
.sp
For units of type slice, the only accepted value for this setting is the parent slice\&. Since the name of a slice unit implies the parent slice, it is hence redundant to ever set this parameter directly for slice units\&.
.sp
Special care should be taken when relying on the default slice assignment in templated service units that have
\fIDefaultDependencies=no\fR
set, see
\fBsystemd.service\fR(5), section "Automatic Dependencies" for details\&.
.RE
.PP
\fIDelegate=\fR
.RS 4
Turns on delegation of further resource control partitioning to processes of the unit\&. For unprivileged services (i\&.e\&. those using the
\fIUser=\fR
setting), this allows processes to create a subhierarchy beneath its control group path\&. For privileged services and scopes, this ensures the processes will have all control group controllers enabled\&.
.RE
.SH "DEPRECATED OPTIONS"
.PP
The following options are deprecated\&. Use the indicated superseding options instead:
.PP
\fICPUShares=\fR\fI\fIweight\fR\fR, \fIStartupCPUShares=\fR\fI\fIweight\fR\fR
.RS 4
Assign the specified CPU time share weight to the processes executed\&. These options take an integer value and control the
"cpu\&.shares"
control group attribute\&. The allowed range is 2 to 262144\&. Defaults to 1024\&. For details about this control group attribute, see
\m[blue]\fBsched\-design\-CFS\&.txt\fR\m[]\&\s-2\u[5]\d\s+2\&. The available CPU time is split up among all units within one slice relative to their CPU time share weight\&.
.sp
While
\fIStartupCPUShares=\fR
only applies to the startup phase of the system,
\fICPUShares=\fR
applies to normal runtime of the system, and if the former is not set also to the startup phase\&. Using
\fIStartupCPUShares=\fR
allows prioritizing specific services at boot\-up differently than during normal runtime\&.
.sp
Implies
"CPUAccounting=true"\&.
.sp
These settings are deprecated\&. Use
\fICPUWeight=\fR
and
\fIStartupCPUWeight=\fR
instead\&.
.RE
.PP
\fIMemoryLimit=\fR\fI\fIbytes\fR\fR
.RS 4
Specify the limit on maximum memory usage of the executed processes\&. The limit specifies how much process and kernel memory can be used by tasks in this unit\&. Takes a memory size in bytes\&. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively\&. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system\&. If assigned the special value
"infinity", no memory limit is applied\&. This controls the
"memory\&.limit_in_bytes"
control group attribute\&. For details about this control group attribute, see
\m[blue]\fBmemory\&.txt\fR\m[]\&\s-2\u[8]\d\s+2\&.
.sp
Implies
"MemoryAccounting=true"\&.
.sp
This setting is deprecated\&. Use
\fIMemoryMax=\fR
instead\&.
.RE
.PP
\fIBlockIOAccounting=\fR
.RS 4
Turn on Block I/O accounting for this unit, if the legacy control group hierarchy is used on the system\&. Takes a boolean argument\&. Note that turning on block I/O accounting for one unit will also implicitly turn it on for all units contained in the same slice and all for its parent slices and the units contained therein\&. The system default for this setting may be controlled with
\fIDefaultBlockIOAccounting=\fR
in
\fBsystemd-system.conf\fR(5)\&.
.sp
This setting is deprecated\&. Use
\fIIOAccounting=\fR
instead\&.
.RE
.PP
\fIBlockIOWeight=\fR\fI\fIweight\fR\fR, \fIStartupBlockIOWeight=\fR\fI\fIweight\fR\fR
.RS 4
Set the default overall block I/O weight for the executed processes, if the legacy control group hierarchy is used on the system\&. Takes a single weight value (between 10 and 1000) to set the default block I/O weight\&. This controls the
"blkio\&.weight"
control group attribute, which defaults to 500\&. For details about this control group attribute, see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[9]\d\s+2\&. The available I/O bandwidth is split up among all units within one slice relative to their block I/O weight\&.
.sp
While
\fIStartupBlockIOWeight=\fR
only applies to the startup phase of the system,
\fIBlockIOWeight=\fR
applies to the later runtime of the system, and if the former is not set also to the startup phase\&. This allows prioritizing specific services at boot\-up differently than during runtime\&.
.sp
Implies
"BlockIOAccounting=true"\&.
.sp
These settings are deprecated\&. Use
\fIIOWeight=\fR
and
\fIStartupIOWeight=\fR
instead\&.
.RE
.PP
\fIBlockIODeviceWeight=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIweight\fR\fR
.RS 4
Set the per\-device overall block I/O weight for the executed processes, if the legacy control group hierarchy is used on the system\&. Takes a space\-separated pair of a file path and a weight value to specify the device specific weight value, between 10 and 1000\&. (Example: "/dev/sda 500")\&. The file path may be specified as path to a block device node or as any other file, in which case the backing block device of the file system of the file is determined\&. This controls the
"blkio\&.weight_device"
control group attribute, which defaults to 1000\&. Use this option multiple times to set weights for multiple devices\&. For details about this control group attribute, see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[9]\d\s+2\&.
.sp
Implies
"BlockIOAccounting=true"\&.
.sp
This setting is deprecated\&. Use
\fIIODeviceWeight=\fR
instead\&.
.RE
.PP
\fIBlockIOReadBandwidth=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIbytes\fR\fR, \fIBlockIOWriteBandwidth=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIbytes\fR\fR
.RS 4
Set the per\-device overall block I/O bandwidth limit for the executed processes, if the legacy control group hierarchy is used on the system\&. Takes a space\-separated pair of a file path and a bandwidth value (in bytes per second) to specify the device specific bandwidth\&. The file path may be a path to a block device node, or as any other file in which case the backing block device of the file system of the file is used\&. If the bandwidth is suffixed with K, M, G, or T, the specified bandwidth is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes, respectively, to the base of 1000\&. (Example: "/dev/disk/by\-path/pci\-0000:00:1f\&.2\-scsi\-0:0:0:0 5M")\&. This controls the
"blkio\&.throttle\&.read_bps_device"
and
"blkio\&.throttle\&.write_bps_device"
control group attributes\&. Use this option multiple times to set bandwidth limits for multiple devices\&. For details about these control group attributes, see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[9]\d\s+2\&.
.sp
Implies
"BlockIOAccounting=true"\&.
.sp
These settings are deprecated\&. Use
\fIIOReadBandwidthMax=\fR
and
\fIIOWriteBandwidthMax=\fR
instead\&.
.RE
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemd.unit\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.slice\fR(5),
\fBsystemd.scope\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.mount\fR(5),
\fBsystemd.swap\fR(5),
\fBsystemd.exec\fR(5),
\fBsystemd.directives\fR(7),
\fBsystemd.special\fR(7), The documentation for control groups and specific controllers in the Linux kernel:
\m[blue]\fBcgroups\&.txt\fR\m[]\&\s-2\u[4]\d\s+2,
\m[blue]\fBcpuacct\&.txt\fR\m[]\&\s-2\u[10]\d\s+2,
\m[blue]\fBmemory\&.txt\fR\m[]\&\s-2\u[8]\d\s+2,
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[9]\d\s+2\&.
.SH "NOTES"
.IP " 1." 4
New Control Group Interfaces
.RS 4
\%https://www.freedesktop.org/wiki/Software/systemd/ControlGroupInterface/
.RE
.IP " 2." 4
cgroup-v2.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroup-v2.txt
.RE
.IP " 3." 4
cgroup-v2-cpu.txt
.RS 4
\%https://git.kernel.org/cgit/linux/kernel/git/tj/cgroup.git/tree/Documentation/cgroup-v2-cpu.txt?h=cgroup-v2-cpu
.RE
.IP " 4." 4
cgroups.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt
.RE
.IP " 5." 4
sched-design-CFS.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt
.RE
.IP " 6." 4
pids.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroup-v1/pids.txt
.RE
.IP " 7." 4
devices.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroup-v1/devices.txt
.RE
.IP " 8." 4
memory.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt
.RE
.IP " 9." 4
blkio-controller.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroup-v1/blkio-controller.txt
.RE
.IP "10." 4
cpuacct.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroup-v1/cpuacct.txt
.RE
